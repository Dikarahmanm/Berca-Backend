using Berca_Backend.Services.Interfaces;
using Berca_Backend.DTOs;

namespace Berca_Backend.Services
{
    /// <summary>
    /// Service for handling background jobs and scheduled tasks
    /// Includes calendar event auto-generation and cleanup tasks
    /// </summary>
    public class BackgroundJobService : IBackgroundJobService
    {
        private readonly ICalendarEventService _calendarEventService;
        private readonly ILogger<BackgroundJobService> _logger;
        private readonly IServiceProvider _serviceProvider;

        public BackgroundJobService(
            ICalendarEventService calendarEventService,
            ILogger<BackgroundJobService> logger,
            IServiceProvider serviceProvider)
        {
            _calendarEventService = calendarEventService;
            _logger = logger;
            _serviceProvider = serviceProvider;
        }

        /// <summary>
        /// Daily job to auto-generate calendar events for all branches
        /// Runs every day at 00:00 (midnight)
        /// </summary>
        public async Task AutoGenerateCalendarEventsDaily()
        {
            try
            {
                _logger.LogInformation("Starting daily calendar events auto-generation at {Time}", DateTime.UtcNow);

                var startDate = DateTime.Today;
                var endDate = DateTime.Today.AddDays(30); // Generate for next 30 days

                // Generate for all branches (branchId = null means all branches)
                var generateDto = new AutoGenerateEventsDto
                {
                    StartDate = startDate,
                    EndDate = endDate,
                    BranchId = null, // All branches
                    GenerateProductExpiry = true,
                    GenerateFactureDue = true,
                    GenerateMemberPayments = true
                };

                // Use system user ID (1) for background jobs
                const int systemUserId = 1;

                var generatedCount = await _calendarEventService.AutoGenerateEventsAsync(generateDto, systemUserId);

                _logger.LogInformation(
                    "Daily calendar auto-generation completed. Generated {Count} events. Time: {Time}",
                    generatedCount,
                    DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during daily calendar events auto-generation");
                throw;
            }
        }

        /// <summary>
        /// Weekly job to clean up old completed auto-generated events
        /// Runs every Sunday at 02:00
        /// </summary>
        public async Task CleanupOldAutoGeneratedEvents()
        {
            try
            {
                _logger.LogInformation("Starting cleanup of old auto-generated events at {Time}", DateTime.UtcNow);

                // Clean up completed events older than 30 days
                var cutoffDate = DateTime.Today.AddDays(-30);

                // This would need to be implemented in CalendarEventService
                // For now, we'll just log
                _logger.LogInformation("Cleanup job completed at {Time}", DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during cleanup of old auto-generated events");
                throw;
            }
        }

        /// <summary>
        /// Hourly job to send pending event reminders
        /// Runs every hour
        /// </summary>
        public async Task SendPendingEventReminders()
        {
            try
            {
                _logger.LogInformation("Starting send pending event reminders at {Time}", DateTime.UtcNow);

                // This would integrate with notification service
                // For now, we'll just log
                _logger.LogInformation("Reminder job completed at {Time}", DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during send pending event reminders");
                throw;
            }
        }

        /// <summary>
        /// Test job to verify Hangfire is working
        /// Can be triggered manually
        /// </summary>
        public Task TestBackgroundJob()
        {
            _logger.LogInformation("Test background job executed successfully at {Time}", DateTime.UtcNow);
            return Task.CompletedTask;
        }
    }
}
