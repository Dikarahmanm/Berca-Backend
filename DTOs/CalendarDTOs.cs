using System.ComponentModel.DataAnnotations;
using Berca_Backend.Models;

namespace Berca_Backend.DTOs
{
    /// <summary>
    /// DTO for calendar event responses
    /// </summary>
    public class CalendarEventDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string? Description { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public bool IsAllDay { get; set; }
        public CalendarEventType EventType { get; set; }
        public EventPriority Priority { get; set; }
        public string? ActionUrl { get; set; }
        public int? RelatedEntityId { get; set; }
        public string? RelatedEntityType { get; set; }
        public int? BranchId { get; set; }
        public string? BranchName { get; set; }
        public bool HasReminder { get; set; }
        public int? ReminderMinutes { get; set; }
        public bool ReminderSent { get; set; }
        public string? Color { get; set; }
        public bool IsActive { get; set; }
        public bool IsAutoGenerated { get; set; }
        public string? RecurrencePattern { get; set; }
        public string? Notes { get; set; }
        public int CreatedBy { get; set; }
        public string? CreatedByName { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }

        // Business context data
        public string? RelatedEntityName { get; set; } // Product name, Supplier name, etc.
        public string? RelatedEntityDetails { get; set; } // Additional context info
    }

    /// <summary>
    /// DTO for creating new calendar events
    /// </summary>
    public class CreateCalendarEventDto
    {
        [Required]
        [MaxLength(200)]
        public string Title { get; set; } = string.Empty;

        [MaxLength(1000)]
        public string? Description { get; set; }

        [Required]
        public DateTime StartDate { get; set; }

        public DateTime? EndDate { get; set; }

        public bool IsAllDay { get; set; } = false;

        [Required]
        public CalendarEventType EventType { get; set; }

        public EventPriority Priority { get; set; } = EventPriority.Normal;

        [MaxLength(500)]
        public string? ActionUrl { get; set; }

        public int? RelatedEntityId { get; set; }

        [MaxLength(50)]
        public string? RelatedEntityType { get; set; }

        public int? BranchId { get; set; }

        public bool HasReminder { get; set; } = false;

        public int? ReminderMinutes { get; set; }

        [MaxLength(7)]
        public string? Color { get; set; }

        [MaxLength(500)]
        public string? RecurrencePattern { get; set; }

        [MaxLength(2000)]
        public string? Notes { get; set; }
    }

    /// <summary>
    /// DTO for updating calendar events
    /// </summary>
    public class UpdateCalendarEventDto
    {
        [MaxLength(200)]
        public string? Title { get; set; }

        [MaxLength(1000)]
        public string? Description { get; set; }

        public DateTime? StartDate { get; set; }

        public DateTime? EndDate { get; set; }

        public bool? IsAllDay { get; set; }

        public CalendarEventType? EventType { get; set; }

        public EventPriority? Priority { get; set; }

        [MaxLength(500)]
        public string? ActionUrl { get; set; }

        public int? RelatedEntityId { get; set; }

        [MaxLength(50)]
        public string? RelatedEntityType { get; set; }

        public int? BranchId { get; set; }

        public bool? HasReminder { get; set; }

        public int? ReminderMinutes { get; set; }

        [MaxLength(7)]
        public string? Color { get; set; }

        public bool? IsActive { get; set; }

        [MaxLength(500)]
        public string? RecurrencePattern { get; set; }

        [MaxLength(2000)]
        public string? Notes { get; set; }
    }

    /// <summary>
    /// DTO for calendar event query parameters
    /// </summary>
    public class CalendarEventQueryParams
    {
        /// <summary>
        /// Start date for event range
        /// </summary>
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// End date for event range
        /// </summary>
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Filter by event type
        /// </summary>
        public CalendarEventType? EventType { get; set; }

        /// <summary>
        /// Filter by priority
        /// </summary>
        public EventPriority? Priority { get; set; }

        /// <summary>
        /// Filter by branch ID
        /// </summary>
        public int? BranchId { get; set; }

        /// <summary>
        /// Include inactive events
        /// </summary>
        public bool IncludeInactive { get; set; } = false;

        /// <summary>
        /// Only show auto-generated events
        /// </summary>
        public bool? IsAutoGenerated { get; set; }

        /// <summary>
        /// Search term for title/description
        /// </summary>
        public string? SearchTerm { get; set; }

        /// <summary>
        /// Page number for pagination
        /// </summary>
        public int Page { get; set; } = 1;

        /// <summary>
        /// Page size for pagination
        /// </summary>
        public int PageSize { get; set; } = 50;
    }

    /// <summary>
    /// DTO for paginated calendar events response
    /// </summary>
    public class CalendarEventPagedResponseDto
    {
        public List<CalendarEventDto> Events { get; set; } = new();
        public int TotalCount { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalPages { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }

    /// <summary>
    /// DTO for calendar month view
    /// </summary>
    public class CalendarMonthViewDto
    {
        public int Year { get; set; }
        public int Month { get; set; }
        public List<CalendarEventDto> Events { get; set; } = new();
        public Dictionary<int, int> EventCountByDay { get; set; } = new();
        public List<CalendarEventDto> CriticalEvents { get; set; } = new();
    }

    /// <summary>
    /// DTO for daily events summary
    /// </summary>
    public class DailyEventsSummaryDto
    {
        public DateTime Date { get; set; }
        public List<CalendarEventDto> Events { get; set; } = new();
        public int TotalEvents { get; set; }
        public int CriticalEvents { get; set; }
        public int PendingReminders { get; set; }
        public Dictionary<CalendarEventType, int> EventsByType { get; set; } = new();
    }

    /// <summary>
    /// DTO for event reminder settings
    /// </summary>
    public class EventReminderDto
    {
        public int Id { get; set; }
        public int CalendarEventId { get; set; }
        public DateTime ScheduledTime { get; set; }
        public DateTime? SentTime { get; set; }
        public bool IsSent { get; set; }
        public int AttemptCount { get; set; }
        public string? ErrorMessage { get; set; }
        public string? DeliveryMethod { get; set; }
        public int? UserId { get; set; }
        public string? TargetRole { get; set; }
        public string? EventTitle { get; set; }
        public EventPriority EventPriority { get; set; }
    }

    /// <summary>
    /// DTO for bulk event operations
    /// </summary>
    public class BulkEventOperationDto
    {
        [Required]
        public List<int> EventIds { get; set; } = new();

        [Required]
        public string Operation { get; set; } = string.Empty; // "activate", "deactivate", "delete"

        public Dictionary<string, object>? Parameters { get; set; }
    }

    /// <summary>
    /// DTO for auto-generating events from business data
    /// </summary>
    public class AutoGenerateEventsDto
    {
        /// <summary>
        /// Generate events for product expiry dates
        /// </summary>
        public bool GenerateProductExpiry { get; set; } = true;

        /// <summary>
        /// Generate events for facture due dates
        /// </summary>
        public bool GenerateFactureDue { get; set; } = true;

        /// <summary>
        /// Generate events for member payment reminders
        /// </summary>
        public bool GenerateMemberPayments { get; set; } = false;

        /// <summary>
        /// Branch ID to generate events for (null = all branches)
        /// </summary>
        public int? BranchId { get; set; }

        /// <summary>
        /// Date range start for generating events
        /// </summary>
        public DateTime StartDate { get; set; } = DateTime.Today;

        /// <summary>
        /// Date range end for generating events
        /// </summary>
        public DateTime EndDate { get; set; } = DateTime.Today.AddDays(30);

        /// <summary>
        /// Whether to overwrite existing auto-generated events
        /// </summary>
        public bool OverwriteExisting { get; set; } = false;
    }

    /// <summary>
    /// DTO for calendar dashboard summary
    /// </summary>
    public class CalendarDashboardDto
    {
        public DateTime Today { get; set; }
        public List<CalendarEventDto> TodayEvents { get; set; } = new();
        public List<CalendarEventDto> UpcomingEvents { get; set; } = new();
        public List<CalendarEventDto> OverdueEvents { get; set; } = new();
        public Dictionary<CalendarEventType, int> EventTypeCount { get; set; } = new();
        public Dictionary<EventPriority, int> PriorityCount { get; set; } = new();
        public int PendingReminders { get; set; }
        public int TotalEventsThisMonth { get; set; }
    }

    /// <summary>
    /// DTO for calendar event statistics
    /// </summary>
    public class CalendarEventStatsDto
    {
        public int TotalEvents { get; set; }
        public int ActiveEvents { get; set; }
        public int AutoGeneratedEvents { get; set; }
        public int EventsWithReminders { get; set; }
        public int CompletedEvents { get; set; }
        public Dictionary<CalendarEventType, int> EventsByType { get; set; } = new();
        public Dictionary<EventPriority, int> EventsByPriority { get; set; } = new();
        public Dictionary<string, int> EventsByMonth { get; set; } = new();
    }
}