using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Berca_Backend.Services.Interfaces;
using Berca_Backend.DTOs;
using Berca_Backend.Models;
using System.Security.Claims;

namespace Berca_Backend.Controllers
{
    /// <summary>
    /// Controller for managing calendar events and business scheduling
    /// Handles event CRUD, calendar views, and business integration
    /// Indonesian business context with proper authorization
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class CalendarController : ControllerBase
    {
        private readonly ICalendarEventService _calendarEventService;
        private readonly ILogger<CalendarController> _logger;

        public CalendarController(
            ICalendarEventService calendarEventService,
            ILogger<CalendarController> logger)
        {
            _calendarEventService = calendarEventService;
            _logger = logger;
        }

        // ==================== CALENDAR EVENT CRUD ==================== //

        /// <summary>
        /// Get calendar events with filtering and pagination
        /// </summary>
        /// <param name="startDate">Filter by start date</param>
        /// <param name="endDate">Filter by end date</param>
        /// <param name="eventType">Filter by event type</param>
        /// <param name="priority">Filter by priority</param>
        /// <param name="branchId">Filter by branch ID</param>
        /// <param name="includeInactive">Include inactive events</param>
        /// <param name="isAutoGenerated">Filter by auto-generated status</param>
        /// <param name="searchTerm">Search in title and description</param>
        /// <param name="page">Page number</param>
        /// <param name="pageSize">Page size</param>
        /// <returns>Paginated calendar events</returns>
        [HttpGet]
        public async Task<IActionResult> GetEvents(
            [FromQuery] DateTime? startDate = null,
            [FromQuery] DateTime? endDate = null,
            [FromQuery] CalendarEventType? eventType = null,
            [FromQuery] EventPriority? priority = null,
            [FromQuery] int? branchId = null,
            [FromQuery] bool includeInactive = false,
            [FromQuery] bool? isAutoGenerated = null,
            [FromQuery] string? searchTerm = null,
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 50)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var queryParams = new CalendarEventQueryParams
                {
                    StartDate = startDate,
                    EndDate = endDate,
                    EventType = eventType,
                    Priority = priority,
                    BranchId = branchId,
                    IncludeInactive = includeInactive,
                    IsAutoGenerated = isAutoGenerated,
                    SearchTerm = searchTerm,
                    Page = page,
                    PageSize = Math.Min(pageSize, 100) // Max 100 per page
                };

                var result = await _calendarEventService.GetEventsAsync(queryParams, userId.Value);
                
                return Ok(new
                {
                    success = true,
                    data = result,
                    message = $"Berhasil mengambil {result.Events.Count} dari {result.TotalCount} event"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting calendar events");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get calendar events for specific date range
        /// </summary>
        /// <param name="startDate">Start date</param>
        /// <param name="endDate">End date</param>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>List of events in date range</returns>
        [HttpGet("date-range")]
        public async Task<IActionResult> GetEventsByDateRange(
            [FromQuery] DateTime startDate,
            [FromQuery] DateTime endDate,
            [FromQuery] int? branchId = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                if (endDate < startDate)
                {
                    return BadRequest(new { success = false, message = "Tanggal akhir tidak boleh lebih awal dari tanggal awal" });
                }

                if ((endDate - startDate).TotalDays > 366)
                {
                    return BadRequest(new { success = false, message = "Rentang tanggal maksimal 1 tahun" });
                }

                var events = await _calendarEventService.GetEventsByDateRangeAsync(startDate, endDate, branchId, userId.Value);

                return Ok(new
                {
                    success = true,
                    data = events,
                    message = $"Berhasil mengambil {events.Count} event untuk periode {startDate:dd/MM/yyyy} - {endDate:dd/MM/yyyy}"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting events by date range");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get single calendar event by ID
        /// </summary>
        /// <param name="id">Event ID</param>
        /// <returns>Event details</returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetEventById(int id)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var eventDetails = await _calendarEventService.GetEventByIdAsync(id, userId.Value);

                if (eventDetails == null)
                {
                    return NotFound(new { success = false, message = "Event tidak ditemukan" });
                }

                return Ok(new
                {
                    success = true,
                    data = eventDetails,
                    message = "Event berhasil ditemukan"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting event by ID {EventId}", id);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Create new calendar event
        /// </summary>
        /// <param name="createDto">Event creation data</param>
        /// <returns>Created event details</returns>
        [HttpPost]
        [Authorize(Policy = "User.Create")]
        public async Task<IActionResult> CreateEvent([FromBody] CreateCalendarEventDto createDto)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                // Validate access to branch if specified
                if (createDto.BranchId.HasValue && !await CanAccessBranch(createDto.BranchId.Value, userId.Value))
                {
                    return Forbid("Akses ke branch ini tidak diizinkan");
                }

                var validationErrors = await _calendarEventService.ValidateEventDataAsync(createDto);
                if (validationErrors.Any())
                {
                    return BadRequest(new 
                    { 
                        success = false, 
                        message = "Data tidak valid", 
                        errors = validationErrors 
                    });
                }

                var createdEvent = await _calendarEventService.CreateEventAsync(createDto, userId.Value);

                _logger.LogInformation("Calendar event created: {EventId} - {Title} by user {UserId}", 
                    createdEvent.Id, createdEvent.Title, userId);

                return CreatedAtAction(nameof(GetEventById), new { id = createdEvent.Id }, new
                {
                    success = true,
                    data = createdEvent,
                    message = "Event berhasil dibuat"
                });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { success = false, message = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating calendar event");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Update existing calendar event
        /// </summary>
        /// <param name="id">Event ID</param>
        /// <param name="updateDto">Updated event data</param>
        /// <returns>Updated event details</returns>
        [HttpPut("{id}")]
        [Authorize(Policy = "User.Update")]
        public async Task<IActionResult> UpdateEvent(int id, [FromBody] UpdateCalendarEventDto updateDto)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                // Validate access to branch if specified
                if (updateDto.BranchId.HasValue && !await CanAccessBranch(updateDto.BranchId.Value, userId.Value))
                {
                    return Forbid("Akses ke branch ini tidak diizinkan");
                }

                var updatedEvent = await _calendarEventService.UpdateEventAsync(id, updateDto, userId.Value);

                if (updatedEvent == null)
                {
                    return NotFound(new { success = false, message = "Event tidak ditemukan atau tidak dapat diakses" });
                }

                _logger.LogInformation("Calendar event updated: {EventId} - {Title} by user {UserId}", 
                    updatedEvent.Id, updatedEvent.Title, userId);

                return Ok(new
                {
                    success = true,
                    data = updatedEvent,
                    message = "Event berhasil diperbarui"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating calendar event {EventId}", id);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Delete calendar event
        /// </summary>
        /// <param name="id">Event ID</param>
        /// <returns>Success status</returns>
        [HttpDelete("{id}")]
        [Authorize(Policy = "User.Delete")]
        public async Task<IActionResult> DeleteEvent(int id)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var success = await _calendarEventService.DeleteEventAsync(id, userId.Value);

                if (!success)
                {
                    return NotFound(new { success = false, message = "Event tidak ditemukan atau tidak dapat dihapus" });
                }

                _logger.LogInformation("Calendar event deleted: {EventId} by user {UserId}", id, userId);

                return Ok(new { success = true, message = "Event berhasil dihapus" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting calendar event {EventId}", id);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Bulk operations on calendar events
        /// </summary>
        /// <param name="operationDto">Bulk operation details</param>
        /// <returns>Number of events affected</returns>
        [HttpPost("bulk-operation")]
        [Authorize(Policy = "Manager.Manage")]
        public async Task<IActionResult> BulkOperation([FromBody] BulkEventOperationDto operationDto)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                if (!operationDto.EventIds.Any())
                {
                    return BadRequest(new { success = false, message = "Event IDs harus ditentukan" });
                }

                var validOperations = new[] { "activate", "deactivate", "delete" };
                if (!validOperations.Contains(operationDto.Operation.ToLower()))
                {
                    return BadRequest(new { success = false, message = "Operasi tidak valid. Gunakan: activate, deactivate, delete" });
                }

                var affectedCount = await _calendarEventService.BulkOperationAsync(operationDto, userId.Value);

                _logger.LogInformation("Bulk operation {Operation} performed on {Count} events by user {UserId}", 
                    operationDto.Operation, affectedCount, userId);

                return Ok(new
                {
                    success = true,
                    affectedCount = affectedCount,
                    message = $"Operasi {operationDto.Operation} berhasil dilakukan pada {affectedCount} event"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error performing bulk operation");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        // ==================== CALENDAR VIEWS ==================== //

        /// <summary>
        /// Get calendar month view with events
        /// </summary>
        /// <param name="year">Year</param>
        /// <param name="month">Month (1-12)</param>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>Month view with events</returns>
        [HttpGet("month-view/{year}/{month}")]
        public async Task<IActionResult> GetMonthView(int year, int month, [FromQuery] int? branchId = null)
        {
            try
            {
                if (month < 1 || month > 12)
                {
                    return BadRequest(new { success = false, message = "Bulan harus antara 1-12" });
                }

                if (year < 2020 || year > 2030)
                {
                    return BadRequest(new { success = false, message = "Tahun harus antara 2020-2030" });
                }

                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var monthView = await _calendarEventService.GetMonthViewAsync(year, month, branchId, userId.Value);

                return Ok(new
                {
                    success = true,
                    data = monthView,
                    message = $"Berhasil mengambil tampilan kalender untuk {GetIndonesianMonthName(month)} {year}"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting month view for {Year}-{Month}", year, month);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get daily events summary
        /// </summary>
        /// <param name="date">Date to get summary for</param>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>Daily events summary</returns>
        [HttpGet("daily-summary")]
        public async Task<IActionResult> GetDailySummary(
            [FromQuery] DateTime date,
            [FromQuery] int? branchId = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var dailySummary = await _calendarEventService.GetDailySummaryAsync(date, branchId, userId.Value);

                return Ok(new
                {
                    success = true,
                    data = dailySummary,
                    message = $"Berhasil mengambil ringkasan event untuk {date:dd/MM/yyyy}"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting daily summary for {Date}", date);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get calendar dashboard data
        /// </summary>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>Calendar dashboard summary</returns>
        [HttpGet("dashboard")]
        public async Task<IActionResult> GetDashboard([FromQuery] int? branchId = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var dashboard = await _calendarEventService.GetDashboardAsync(userId.Value, branchId);

                return Ok(new
                {
                    success = true,
                    data = dashboard,
                    message = "Berhasil mengambil dashboard kalender"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting calendar dashboard");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        // ==================== BUSINESS INTEGRATION ==================== //

        /// <summary>
        /// Auto-generate events from business data
        /// </summary>
        /// <param name="generateDto">Auto-generation parameters</param>
        /// <returns>Number of events generated</returns>
        [HttpPost("auto-generate")]
        [Authorize(Policy = "Manager.Manage")]
        public async Task<IActionResult> AutoGenerateEvents([FromBody] AutoGenerateEventsDto generateDto)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                // Validate date range
                if (generateDto.EndDate < generateDto.StartDate)
                {
                    return BadRequest(new { success = false, message = "Tanggal akhir tidak boleh lebih awal dari tanggal awal" });
                }

                if ((generateDto.EndDate - generateDto.StartDate).TotalDays > 90)
                {
                    return BadRequest(new { success = false, message = "Rentang tanggal maksimal 90 hari" });
                }

                // Validate access to branch if specified
                if (generateDto.BranchId.HasValue && !await CanAccessBranch(generateDto.BranchId.Value, userId.Value))
                {
                    return Forbid("Akses ke branch ini tidak diizinkan");
                }

                var generatedCount = await _calendarEventService.AutoGenerateEventsAsync(generateDto, userId.Value);

                _logger.LogInformation("Auto-generated {Count} events for user {UserId}", generatedCount, userId);

                return Ok(new
                {
                    success = true,
                    generatedCount = generatedCount,
                    message = $"Berhasil men-generate {generatedCount} event otomatis"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error auto-generating events");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Generate product expiry events
        /// </summary>
        /// <param name="branchId">Optional branch filter</param>
        /// <param name="daysAhead">Days ahead to generate events for</param>
        /// <returns>Number of events generated</returns>
        [HttpPost("generate/product-expiry")]
        [Authorize(Policy = "Manager.Manage")]
        public async Task<IActionResult> GenerateProductExpiryEvents(
            [FromQuery] int? branchId = null,
            [FromQuery] int daysAhead = 30)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                if (daysAhead < 1 || daysAhead > 365)
                {
                    return BadRequest(new { success = false, message = "Days ahead harus antara 1-365" });
                }

                // Validate access to branch if specified
                if (branchId.HasValue && !await CanAccessBranch(branchId.Value, userId.Value))
                {
                    return Forbid("Akses ke branch ini tidak diizinkan");
                }

                var generatedCount = await _calendarEventService.GenerateProductExpiryEventsAsync(branchId, daysAhead, userId.Value);

                _logger.LogInformation("Generated {Count} product expiry events for user {UserId}", generatedCount, userId);

                return Ok(new
                {
                    success = true,
                    generatedCount = generatedCount,
                    message = $"Berhasil men-generate {generatedCount} event kadaluarsa produk"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating product expiry events");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Generate facture due date events
        /// </summary>
        /// <param name="branchId">Optional branch filter</param>
        /// <param name="daysAhead">Days ahead to generate events for</param>
        /// <returns>Number of events generated</returns>
        [HttpPost("generate/facture-due")]
        [Authorize(Policy = "Manager.Manage")]
        public async Task<IActionResult> GenerateFactureDueEvents(
            [FromQuery] int? branchId = null,
            [FromQuery] int daysAhead = 30)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                if (daysAhead < 1 || daysAhead > 365)
                {
                    return BadRequest(new { success = false, message = "Days ahead harus antara 1-365" });
                }

                // Validate access to branch if specified
                if (branchId.HasValue && !await CanAccessBranch(branchId.Value, userId.Value))
                {
                    return Forbid("Akses ke branch ini tidak diizinkan");
                }

                var generatedCount = await _calendarEventService.GenerateFactureDueEventsAsync(branchId, daysAhead, userId.Value);

                _logger.LogInformation("Generated {Count} facture due events for user {UserId}", generatedCount, userId);

                return Ok(new
                {
                    success = true,
                    generatedCount = generatedCount,
                    message = $"Berhasil men-generate {generatedCount} event jatuh tempo faktur"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating facture due events");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get events related to specific entity
        /// </summary>
        /// <param name="entityType">Entity type (Product, Facture, Member)</param>
        /// <param name="entityId">Entity ID</param>
        /// <returns>List of related events</returns>
        [HttpGet("entity/{entityType}/{entityId}")]
        public async Task<IActionResult> GetEventsForEntity(string entityType, int entityId)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var validEntityTypes = new[] { "Product", "ProductBatch", "Facture", "Member", "Supplier" };
                if (!validEntityTypes.Contains(entityType))
                {
                    return BadRequest(new { success = false, message = "Tipe entity tidak valid" });
                }

                var events = await _calendarEventService.GetEventsForEntityAsync(entityType, entityId, userId.Value);

                return Ok(new
                {
                    success = true,
                    data = events,
                    message = $"Berhasil mengambil {events.Count} event untuk {entityType} ID {entityId}"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting events for entity {EntityType}/{EntityId}", entityType, entityId);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        // ==================== STATISTICS & ANALYTICS ==================== //

        /// <summary>
        /// Get calendar event statistics
        /// </summary>
        /// <param name="branchId">Optional branch filter</param>
        /// <param name="fromDate">Start date for statistics</param>
        /// <param name="toDate">End date for statistics</param>
        /// <returns>Event statistics</returns>
        [HttpGet("statistics")]
        [Authorize(Policy = "Manager.View")]
        public async Task<IActionResult> GetEventStatistics(
            [FromQuery] int? branchId = null,
            [FromQuery] DateTime? fromDate = null,
            [FromQuery] DateTime? toDate = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                if (fromDate.HasValue && toDate.HasValue && toDate.Value < fromDate.Value)
                {
                    return BadRequest(new { success = false, message = "Tanggal akhir tidak boleh lebih awal dari tanggal awal" });
                }

                var statistics = await _calendarEventService.GetEventStatisticsAsync(userId.Value, branchId, fromDate, toDate);

                return Ok(new
                {
                    success = true,
                    data = statistics,
                    message = "Berhasil mengambil statistik calendar event"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting event statistics");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get events requiring attention (overdue, high priority, etc.)
        /// </summary>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>List of events requiring attention</returns>
        [HttpGet("attention")]
        public async Task<IActionResult> GetEventsRequiringAttention([FromQuery] int? branchId = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var events = await _calendarEventService.GetEventsRequiringAttentionAsync(userId.Value, branchId);

                return Ok(new
                {
                    success = true,
                    data = events,
                    message = $"Berhasil mengambil {events.Count} event yang memerlukan perhatian"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting events requiring attention");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Get upcoming events for user
        /// </summary>
        /// <param name="days">Number of days ahead to look</param>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>List of upcoming events</returns>
        [HttpGet("upcoming")]
        public async Task<IActionResult> GetUpcomingEvents(
            [FromQuery] int days = 7,
            [FromQuery] int? branchId = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                if (days < 1 || days > 365)
                {
                    return BadRequest(new { success = false, message = "Days harus antara 1-365" });
                }

                var events = await _calendarEventService.GetUpcomingEventsAsync(userId.Value, days, branchId);

                return Ok(new
                {
                    success = true,
                    data = events,
                    message = $"Berhasil mengambil {events.Count} event untuk {days} hari ke depan"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting upcoming events");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        /// <summary>
        /// Search events by text
        /// </summary>
        /// <param name="searchTerm">Search term</param>
        /// <param name="branchId">Optional branch filter</param>
        /// <param name="maxResults">Maximum results to return</param>
        /// <returns>List of matching events</returns>
        [HttpGet("search")]
        public async Task<IActionResult> SearchEvents(
            [FromQuery] string searchTerm,
            [FromQuery] int? branchId = null,
            [FromQuery] int maxResults = 20)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(searchTerm))
                {
                    return BadRequest(new { success = false, message = "Search term harus diisi" });
                }

                if (searchTerm.Length < 2)
                {
                    return BadRequest(new { success = false, message = "Search term minimal 2 karakter" });
                }

                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                maxResults = Math.Min(maxResults, 50); // Max 50 results

                var events = await _calendarEventService.SearchEventsAsync(searchTerm, userId.Value, branchId, maxResults);

                return Ok(new
                {
                    success = true,
                    data = events,
                    message = $"Ditemukan {events.Count} event dengan kata kunci '{searchTerm}'"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error searching events with term: {SearchTerm}", searchTerm);
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        // ==================== REMINDER MANAGEMENT ==================== //

        /// <summary>
        /// Get pending reminders for current user
        /// </summary>
        /// <param name="branchId">Optional branch filter</param>
        /// <returns>List of pending reminders</returns>
        [HttpGet("reminders/pending")]
        public async Task<IActionResult> GetPendingReminders([FromQuery] int? branchId = null)
        {
            try
            {
                var userId = GetCurrentUserId();
                if (userId == null)
                {
                    return Unauthorized("User ID tidak ditemukan");
                }

                var reminders = await _calendarEventService.GetUserPendingRemindersAsync(userId.Value, branchId);

                return Ok(new
                {
                    success = true,
                    data = reminders,
                    message = $"Berhasil mengambil {reminders.Count} reminder yang tertunda"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting pending reminders");
                return StatusCode(500, new { success = false, message = "Terjadi kesalahan sistem" });
            }
        }

        // ==================== HELPER METHODS ==================== //

        private int? GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            return int.TryParse(userIdClaim, out var userId) ? userId : null;
        }

        private string GetCurrentUserRole()
        {
            return User.FindFirst(ClaimTypes.Role)?.Value ?? "User";
        }

        private int? GetCurrentUserBranchId()
        {
            var branchIdClaim = User.FindFirst("BranchId")?.Value;
            return int.TryParse(branchIdClaim, out var branchId) ? branchId : null;
        }

        private Task<bool> CanAccessBranch(int branchId, int userId)
        {
            var userRole = GetCurrentUserRole();
            var userBranchId = GetCurrentUserBranchId();

            // Admin can access all branches
            if (userRole == "Admin")
                return Task.FromResult(true);

            // Users can only access their own branch
            return Task.FromResult(userBranchId == branchId);
        }

        private static string GetIndonesianMonthName(int month)
        {
            return month switch
            {
                1 => "Januari",
                2 => "Februari",
                3 => "Maret",
                4 => "April",
                5 => "Mei",
                6 => "Juni",
                7 => "Juli",
                8 => "Agustus",
                9 => "September",
                10 => "Oktober",
                11 => "November",
                12 => "Desember",
                _ => "Unknown"
            };
        }
    }
}