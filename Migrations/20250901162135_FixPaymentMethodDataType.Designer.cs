// <auto-generated />
using System;
using Berca_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Berca_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250901162135_FixPaymentMethodDataType")]
    partial class FixPaymentMethodDataType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Berca_Backend.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BranchType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentBranchId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreSize")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Medium");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("BranchCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Branches_BranchCode");

                    b.HasIndex("BranchType")
                        .HasDatabaseName("IX_Branches_BranchType");

                    b.HasIndex("City")
                        .HasDatabaseName("IX_Branches_City");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Branches_IsActive");

                    b.HasIndex("ParentBranchId");

                    b.HasIndex("Province")
                        .HasDatabaseName("IX_Branches_Province");

                    b.HasIndex("SupplierId");

                    b.HasIndex("Province", "City")
                        .HasDatabaseName("IX_Branches_Province_City");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Berca_Backend.Models.BranchAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_BranchAccess_BranchId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BranchAccess_IsActive");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_BranchAccess_UserId");

                    b.ToTable("BranchAccesses");
                });

            modelBuilder.Entity("Berca_Backend.Models.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("HasReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReminderMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_CalendarEvents_BranchId");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_CalendarEvents_CreatedBy");

                    b.HasIndex("EventType")
                        .HasDatabaseName("IX_CalendarEvents_EventType");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_CalendarEvents_StartDate");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("RelatedEntityType", "RelatedEntityId")
                        .HasDatabaseName("IX_CalendarEvents_RelatedEntity");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Berca_Backend.Models.CalendarEventReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<int>("CalendarEventId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.HasIndex("UserId");

                    b.ToTable("CalendarEventReminders");
                });

            modelBuilder.Entity("Berca_Backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DefaultExpiryWarningDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresExpiryDate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .HasDatabaseName("IX_Categories_Color");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Categories_Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FF6B35",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Mie instan, nasi instan, bubur instan - Indomie, Pop Mie, Sedaap, Sarimi",
                            Name = "Makanan Instan",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Color = "#FF8E53",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Kornet, sarden, buah kaleng, sayur kaleng - Pronas, ABC, Ayam Brand",
                            Name = "Makanan Kaleng",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FFA726",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Chitato, Taro, Qtela, Lay's, keripik tradisional, kacang-kacangan",
                            Name = "Snacks & Keripik",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Color = "#FFB74D",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Roma, Monde, Khong Guan, Oreo, wafer Tanggo, Marie Regal",
                            Name = "Biskuit & Wafer",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Color = "#8D4E85",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Kopiko, Ricola, Cadbury, SilverQueen, permen lokal, Mentos",
                            Name = "Permen & Coklat",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Color = "#D2691E",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Kue kering, roti tawar, roti manis, donat, cake - Sari Roti, Breadtalk",
                            Name = "Kue & Roti",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Color = "#4FC3F7",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Nugget, sosis, bakso beku, frozen food - Fiesta, Bernardi, So Good",
                            Name = "Makanan Beku",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Color = "#29B6F6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Aqua, VIT, Club, Pristine, Le Minerale, Cleo",
                            Name = "Air Mineral",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Color = "#E53935",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Coca Cola, Sprite, Fanta, 7UP, Pepsi, Mirinda",
                            Name = "Minuman Ringan",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            Color = "#6D4C41",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Teh Botol, Ultra Teh, Good Day, Kapal Api, Nescafe, Teh Pucuk",
                            Name = "Teh & Kopi Kemasan",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Color = "#FFF8E1",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Ultra Milk, Indomilk, Frisian Flag, susu kental manis - Carnation, Cap Enak",
                            Name = "Susu & Dairy",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            Color = "#00BCD4",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Pocari Sweat, Mizone, Hydro Coco, Ion Water, Revive",
                            Name = "Minuman Isotonik",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            Color = "#FF7043",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Buavita, SunTop, Minute Maid, Okky Jelly Drink, Frestea",
                            Name = "Jus & Minuman Buah",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            Color = "#D32F2F",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Kratingdaeng, M-150, Extra Joss, Red Bull, Shark",
                            Name = "Minuman Energi",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            Color = "#E1BEE7",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 60,
                            Description = "Walls, Aice, Diamond, Campina, Magnum, Cornetto",
                            Name = "Es Krim",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 16,
                            Color = "#4CAF50",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 90,
                            Description = "Paracetamol, Panadol, Bodrex, Paramex, Aspirin, Ibuprofen",
                            Name = "Obat Bebas",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 17,
                            Color = "#66BB6A",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 90,
                            Description = "Mixagrip, Neozep, Woods, Vicks, Komix, Actifed",
                            Name = "Obat Flu & Batuk",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 18,
                            Color = "#81C784",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 90,
                            Description = "Promag, Mylanta, Antasida, Norit, Entrostop, Diapet",
                            Name = "Obat Pencernaan",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 19,
                            Color = "#A5D6A7",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 90,
                            Description = "Redoxon, CDR, Enervon-C, Sangobion, Blackmores, Imboost",
                            Name = "Vitamin & Suplemen",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 20,
                            Color = "#C8E6C9",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 90,
                            Description = "Plester, perban, betadine, alkohol, kapas, hansaplast",
                            Name = "Perawatan Luka",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 21,
                            Color = "#E8F5E8",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 90,
                            Description = "Dettol, Antis, Lifebuoy, Nuvo, Mama Lime, Biore",
                            Name = "Hand Sanitizer & Antiseptik",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 22,
                            Color = "#2196F3",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Pantene, Head & Shoulders, Sunsilk, Clear, Tresemme, Makarizo",
                            Name = "Shampo & Hair Care",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 23,
                            Color = "#42A5F5",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Lux, Dove, Lifebuoy, Giv, Dettol, Biore, Citra",
                            Name = "Sabun Mandi",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 24,
                            Color = "#64B5F6",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Pepsodent, Close Up, Formula, Sensodyne, Systema, Enzim",
                            Name = "Pasta Gigi",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 25,
                            Color = "#90CAF9",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Vaseline, Nivea, Citra, Pond's, Olay, Garnier",
                            Name = "Body Lotion & Skin Care",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 26,
                            Color = "#BBDEFB",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Rexona, Dove Men, Gillette, Axe, Nivea Men, Adidas",
                            Name = "Deodorant",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 27,
                            Color = "#E91E63",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Wardah, Pixy, Maybelline, Revlon, L'Oreal, Make Over",
                            Name = "Kosmetik & Makeup",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 28,
                            Color = "#F06292",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 180,
                            Description = "Axe, Rexona, Body Shop, Calvin Klein, Hugo Boss, local brands",
                            Name = "Parfum & Cologne",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 29,
                            Color = "#FFE0B2",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 45,
                            Description = "SGM, Dancow, Bebelac, Lactogen, Nutrilon, Enfamil",
                            Name = "Susu Formula",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 30,
                            Color = "#FFCC80",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 45,
                            Description = "Cerelac, Milna, Promina, SUN, Heinz, Gerber",
                            Name = "Makanan Bayi",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 31,
                            Color = "#FFB74D",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 45,
                            Description = "Pampers, MamyPoko, Sweety, Merries, Goon, Huggies",
                            Name = "Popok & Diapers",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 32,
                            Color = "#FFA726",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 45,
                            Description = "Baby oil, powder, lotion, shampoo - Johnson's, Cussons, Zwitsal",
                            Name = "Baby Care Products",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 33,
                            Color = "#9C27B0",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 365,
                            Description = "Rinso, Attack, Surf, So Klin, Daia, Total",
                            Name = "Deterjen & Sabun Cuci",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 34,
                            Color = "#AB47BC",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 365,
                            Description = "Sunlight, Mama Lemon, Cream, Joy, Soklin, Economic",
                            Name = "Pembersih Piring",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 35,
                            Color = "#BA68C8",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 365,
                            Description = "Vixal, Super Pel, Wipol, Karbol, Kispray, Stella",
                            Name = "Pembersih Lantai",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 36,
                            Color = "#CE93D8",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 365,
                            Description = "Vixal, Harpic, Domestos, Duck, Toilet Duck, Cif",
                            Name = "Pembersih Kamar Mandi",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 37,
                            Color = "#E1BEE7",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 365,
                            Description = "Molto, Downy, Soklin, Comfort, Rapika, Stella",
                            Name = "Pelembut & Pewangi Pakaian",
                            RequiresExpiryDate = true,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 38,
                            Color = "#607D8B",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Powerbank, charger, earphone, speaker, flashdisk, mouse",
                            Name = "Elektronik & Gadget",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 39,
                            Color = "#78909C",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Case, screen protector, holder, cable, tempered glass, ring holder",
                            Name = "Aksesoris HP",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 40,
                            Color = "#8D6E63",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Gudang Garam, Djarum, Marlboro, Sampoerna, Bentoel, Lucky Strike",
                            Name = "Rokok & Tembakau",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 41,
                            Color = "#FF9800",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Pensil, pulpen, buku, penggaris, penghapus, spidol - Faber Castell, Pilot",
                            Name = "Alat Tulis",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 42,
                            Color = "#795548",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Tissue, toilet paper, kantong plastik, aluminum foil, plastic wrap",
                            Name = "Perlengkapan Rumah",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 43,
                            Color = "#F44336",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Kartu ucapan, gift wrap, balon, hiasan, mainan kecil, souvenir",
                            Name = "Seasonal & Gift Items",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 44,
                            Color = "#FFEB3B",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DefaultExpiryWarningDays = 30,
                            Description = "Baterai ABC, Energizer, Panasonic, lampu LED, senter, bohlam",
                            Name = "Baterai & Lampu",
                            RequiresExpiryDate = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Berca_Backend.Models.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNoteNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("DisputeReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ReceiptFile")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceivedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierInvoiceFile")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupplierInvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierPONumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupportingDocs")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_Factures_BranchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Factures_DueDate");

                    b.HasIndex("InternalReferenceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Factures_InternalReferenceNumber");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("IX_Factures_InvoiceDate");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Factures_Status");

                    b.HasIndex("TotalAmount")
                        .HasDatabaseName("IX_Factures_TotalAmount");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VerifiedBy");

                    b.HasIndex("BranchId", "Status")
                        .HasDatabaseName("IX_Factures_Branch_Status");

                    b.HasIndex("Status", "DueDate")
                        .HasDatabaseName("IX_Factures_Status_DueDate");

                    b.HasIndex("SupplierId", "SupplierInvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Factures_Supplier_InvoiceNumber");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("Berca_Backend.Models.FactureItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AcceptedQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("SupplierItemCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierItemDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("VerificationNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal?>("VerifiedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FactureId")
                        .HasDatabaseName("IX_FactureItems_FactureId");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("IX_FactureItems_IsVerified");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_FactureItems_ProductId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("FactureItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.FacturePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConfirmationFile")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DisputeReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FactureId")
                        .HasColumnType("int");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OurPaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceiptFile")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierAckReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransferReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FactureId")
                        .HasDatabaseName("IX_FacturePayments_FactureId");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("IX_FacturePayments_PaymentDate");

                    b.HasIndex("PaymentMethod")
                        .HasDatabaseName("IX_FacturePayments_PaymentMethod");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_FacturePayments_Status");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("Status", "PaymentDate")
                        .HasDatabaseName("IX_FacturePayments_Status_PaymentDate");

                    b.ToTable("FacturePayments");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryMutation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("StockAfter")
                        .HasColumnType("int");

                    b.Property<int>("StockBefore")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InventoryMutations_CreatedAt");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_InventoryMutations_ProductId");

                    b.HasIndex("SaleId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_InventoryMutations_Type");

                    b.ToTable("InventoryMutations");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("ApprovedByUserId");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CancelledBy")
                        .HasColumnType("int")
                        .HasColumnName("CancelledByUserId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationBranchId")
                        .HasColumnType("int")
                        .HasColumnName("ToBranchId");

                    b.Property<decimal>("DistanceKm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("EstimatedCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogisticsProvider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReceivedBy")
                        .HasColumnType("int")
                        .HasColumnName("ReceivedByUserId");

                    b.Property<string>("RequestReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int")
                        .HasColumnName("RequestedByUserId");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippedBy")
                        .HasColumnType("int")
                        .HasColumnName("ShippedByUserId");

                    b.Property<int>("SourceBranchId")
                        .HasColumnType("int")
                        .HasColumnName("FromBranchId");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransferNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CancelledBy");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_InventoryTransfers_CreatedAt");

                    b.HasIndex("DestinationBranchId")
                        .HasDatabaseName("IX_InventoryTransfers_DestinationBranchId");

                    b.HasIndex("ReceivedBy");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("ShippedBy");

                    b.HasIndex("SourceBranchId")
                        .HasDatabaseName("IX_InventoryTransfers_SourceBranchId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_InventoryTransfers_Status");

                    b.HasIndex("TransferNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_InventoryTransfers_TransferNumber");

                    b.ToTable("InventoryTransfers");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransferItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DestinationStockAfter")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationStockBefore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryTransferId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("QualityNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<int>("SourceStockAfter")
                        .HasColumnType("int");

                    b.Property<int>("SourceStockBefore")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("UnitCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("InventoryTransferId")
                        .HasDatabaseName("IX_InventoryTransferItems_InventoryTransferId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_InventoryTransferItems_ProductId");

                    b.ToTable("InventoryTransferItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransferStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<int>("InventoryTransferId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt")
                        .HasDatabaseName("IX_InventoryTransferStatusHistories_ChangedAt");

                    b.HasIndex("ChangedBy")
                        .HasDatabaseName("IX_InventoryTransferStatusHistories_ChangedBy");

                    b.HasIndex("InventoryTransferId")
                        .HasDatabaseName("IX_InventoryTransferStatusHistories_InventoryTransferId");

                    b.ToTable("InventoryTransferStatusHistories");
                });

            modelBuilder.Entity("Berca_Backend.Models.LogActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LogActivities");
                });

            modelBuilder.Entity("Berca_Backend.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreditScore")
                        .HasColumnType("int");

                    b.Property<int>("CreditStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastTransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LifetimeDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextPaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentDelays")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalTransactions")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Members_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Members_IsActive");

                    b.HasIndex("MemberNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Members_MemberNumber");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("IX_Members_Phone");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Berca_Backend.Models.MemberCreditTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_MemberCreditTransactions_DueDate");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("IX_MemberCreditTransactions_MemberId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_MemberCreditTransactions_Status");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_MemberCreditTransactions_TransactionDate");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_MemberCreditTransactions_Type");

                    b.HasIndex("Type", "DueDate")
                        .HasDatabaseName("IX_MemberCreditTransactions_Type_DueDate");

                    b.HasIndex("MemberId", "Type", "Status")
                        .HasDatabaseName("IX_MemberCreditTransactions_Member_Type_Status");

                    b.ToTable("MemberCreditTransactions");
                });

            modelBuilder.Entity("Berca_Backend.Models.MemberPaymentReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ContactMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DaysOverdue")
                        .HasColumnType("int");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("NextReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReminderType")
                        .HasColumnType("int");

                    b.Property<decimal?>("ResponseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("IX_MemberPaymentReminders_MemberId");

                    b.HasIndex("NextReminderDate")
                        .HasDatabaseName("IX_MemberPaymentReminders_NextReminderDate");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_MemberPaymentReminders_Priority");

                    b.HasIndex("ReminderDate")
                        .HasDatabaseName("IX_MemberPaymentReminders_ReminderDate");

                    b.HasIndex("ReminderType")
                        .HasDatabaseName("IX_MemberPaymentReminders_ReminderType");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_MemberPaymentReminders_Status");

                    b.HasIndex("MemberId", "Status")
                        .HasDatabaseName("IX_MemberPaymentReminders_Member_Status");

                    b.HasIndex("NextReminderDate", "Status")
                        .HasDatabaseName("IX_MemberPaymentReminders_NextReminder_Status");

                    b.ToTable("MemberPaymentReminders");
                });

            modelBuilder.Entity("Berca_Backend.Models.MemberPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PointRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_MemberPoints_CreatedAt");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("IX_MemberPoints_MemberId");

                    b.HasIndex("SaleId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_MemberPoints_Type");

                    b.ToTable("MemberPoints");
                });

            modelBuilder.Entity("Berca_Backend.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelatedEntity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notifications_CreatedAt");

                    b.HasIndex("IsRead")
                        .HasDatabaseName("IX_Notifications_IsRead");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Notifications_Type");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Notifications_UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Berca_Backend.Models.NotificationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TargetRoles")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationRules");
                });

            modelBuilder.Entity("Berca_Backend.Models.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailLowStock")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailMonthlyReport")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailSystemUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppLowStock")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppSales")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppSystem")
                        .HasColumnType("bit");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("PushToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan>("QuietHoursEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("QuietHoursStart")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_NotificationSettings_UserId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Berca_Backend.Models.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("RequireInteraction")
                        .HasColumnType("bit");

                    b.Property<string>("SoundUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TemplateKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VibrationPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("Berca_Backend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pcs");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_Barcode");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Products_CategoryId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Products_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "8886001001923",
                            BuyPrice = 2500m,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mie instan rasa ayam bawang - Indofood",
                            IsActive = true,
                            MinimumStock = 10,
                            Name = "Indomie Ayam Bawang",
                            SellPrice = 3500m,
                            Stock = 50,
                            Unit = "pcs",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "8888001234567",
                            BuyPrice = 2300m,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mie instan kuah rasa ayam bawang - Sarimi",
                            IsActive = true,
                            MinimumStock = 10,
                            Name = "Sarimi Ayam Bawang",
                            SellPrice = 3200m,
                            Stock = 40,
                            Unit = "pcs",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "8992843287654",
                            BuyPrice = 18000m,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kornet sapi kaleng 198g - Pronas",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Pronas Kornet Sapi",
                            SellPrice = 25000m,
                            Stock = 24,
                            Unit = "kaleng",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "8999999876543",
                            BuyPrice = 8500m,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Keripik kentang rasa BBQ - Chitato",
                            IsActive = true,
                            MinimumStock = 8,
                            Name = "Chitato Rasa BBQ",
                            SellPrice = 12000m,
                            Stock = 30,
                            Unit = "pcs",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "8992753147258",
                            BuyPrice = 4500m,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Biskuit kelapa - Roma Mayora",
                            IsActive = true,
                            MinimumStock = 12,
                            Name = "Roma Kelapa",
                            SellPrice = 6500m,
                            Stock = 36,
                            Unit = "bks",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "8992787134567",
                            BuyPrice = 2500m,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Air mineral kemasan botol 600ml - Aqua",
                            IsActive = true,
                            MinimumStock = 12,
                            Name = "Aqua 600ml",
                            SellPrice = 3500m,
                            Stock = 48,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Barcode = "8851013301234",
                            BuyPrice = 6000m,
                            CategoryId = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Minuman berkarbonasi rasa cola - Coca Cola",
                            IsActive = true,
                            MinimumStock = 6,
                            Name = "Coca Cola 330ml",
                            SellPrice = 8500m,
                            Stock = 30,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Barcode = "8991002101234",
                            BuyPrice = 4500m,
                            CategoryId = 10,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Teh kemasan botol rasa manis - Sosro",
                            IsActive = true,
                            MinimumStock = 6,
                            Name = "Teh Botol Sosro 450ml",
                            SellPrice = 6500m,
                            Stock = 24,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Barcode = "8992761456789",
                            BuyPrice = 5500m,
                            CategoryId = 11,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Susu UHT rasa coklat - Ultra Milk",
                            IsActive = true,
                            MinimumStock = 8,
                            Name = "Ultra Milk Coklat 250ml",
                            SellPrice = 7500m,
                            Stock = 30,
                            Unit = "kotak",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            Barcode = "8992696789012",
                            BuyPrice = 7000m,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Minuman isotonik elektrolit - Pocari Sweat",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Pocari Sweat 350ml",
                            SellPrice = 10000m,
                            Stock = 20,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Barcode = "8992832123456",
                            BuyPrice = 12000m,
                            CategoryId = 16,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Obat pereda nyeri dan demam - Panadol",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Panadol Tablet",
                            SellPrice = 16000m,
                            Stock = 25,
                            Unit = "strip",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            Barcode = "8992747369852",
                            BuyPrice = 8500m,
                            CategoryId = 17,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Obat flu dan batuk - Mixagrip",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Mixagrip Flu & Batuk",
                            SellPrice = 12000m,
                            Stock = 20,
                            Unit = "strip",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            Barcode = "8992888147258",
                            BuyPrice = 45000m,
                            CategoryId = 19,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vitamin C 1000mg - Redoxon",
                            IsActive = true,
                            MinimumStock = 3,
                            Name = "Redoxon Vitamin C",
                            SellPrice = 65000m,
                            Stock = 15,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            Barcode = "8992777456789",
                            BuyPrice = 18000m,
                            CategoryId = 22,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Shampo rambut total damage care - Pantene",
                            IsActive = true,
                            MinimumStock = 4,
                            Name = "Pantene Shampo 170ml",
                            SellPrice = 25000m,
                            Stock = 18,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            Barcode = "8992556789012",
                            BuyPrice = 4500m,
                            CategoryId = 23,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sabun mandi soft touch - Lux",
                            IsActive = true,
                            MinimumStock = 8,
                            Name = "Lux Sabun Mandi",
                            SellPrice = 6500m,
                            Stock = 30,
                            Unit = "pcs",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 16,
                            Barcode = "8992334567890",
                            BuyPrice = 12000m,
                            CategoryId = 24,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pasta gigi pencegah gigi berlubang - Pepsodent",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Pepsodent 190g",
                            SellPrice = 16000m,
                            Stock = 20,
                            Unit = "tube",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 17,
                            Barcode = "8992775987654",
                            BuyPrice = 15000m,
                            CategoryId = 33,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Deterjen bubuk anti noda - Rinso",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Rinso Anti Noda 800g",
                            SellPrice = 21000m,
                            Stock = 25,
                            Unit = "bks",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 18,
                            Barcode = "8992775123456",
                            BuyPrice = 8500m,
                            CategoryId = 34,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sabun pencuci piring konsentrat - Sunlight",
                            IsActive = true,
                            MinimumStock = 5,
                            Name = "Sunlight 755ml",
                            SellPrice = 12000m,
                            Stock = 22,
                            Unit = "btl",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 19,
                            Barcode = "6941059648208",
                            BuyPrice = 180000m,
                            CategoryId = 38,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Powerbank portabel 10000mAh - Xiaomi",
                            IsActive = true,
                            MinimumStock = 2,
                            Name = "Powerbank Xiaomi 10000mAh",
                            SellPrice = 250000m,
                            Stock = 8,
                            Unit = "pcs",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 20,
                            Barcode = "8992704987654",
                            BuyPrice = 18000m,
                            CategoryId = 40,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rokok kretek filter - Gudang Garam",
                            IsActive = true,
                            MinimumStock = 10,
                            Name = "Gudang Garam Surya 16",
                            SellPrice = 20000m,
                            Stock = 50,
                            Unit = "bks",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 21,
                            Barcode = "8992804321098",
                            BuyPrice = 8000m,
                            CategoryId = 44,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Baterai alkaline ukuran AA - ABC",
                            IsActive = true,
                            MinimumStock = 10,
                            Name = "Baterai ABC AA",
                            SellPrice = 12000m,
                            Stock = 40,
                            Unit = "pack",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 22,
                            Barcode = "8999812345678",
                            BuyPrice = 1500m,
                            CategoryId = 41,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pulpen standard warna biru - Standard",
                            IsActive = true,
                            MinimumStock = 15,
                            Name = "Pulpen Standard AE7",
                            SellPrice = 2500m,
                            Stock = 50,
                            Unit = "pcs",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Berca_Backend.Models.ProductBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisposalMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DisposedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialStock")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisposed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatchNumber")
                        .HasDatabaseName("IX_ProductBatches_BatchNumber");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_ProductBatches_BranchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DisposedByUserId");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_ProductBatches_ExpiryDate");

                    b.HasIndex("IsDisposed")
                        .HasDatabaseName("IX_ProductBatches_IsDisposed");

                    b.HasIndex("IsExpired")
                        .HasDatabaseName("IX_ProductBatches_IsExpired");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductBatches_ProductId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("BranchId", "ExpiryDate")
                        .HasDatabaseName("IX_ProductBatches_BranchId_ExpiryDate");

                    b.HasIndex("ProductId", "ExpiryDate")
                        .HasDatabaseName("IX_ProductBatches_ProductId_ExpiryDate");

                    b.ToTable("ProductBatches");
                });

            modelBuilder.Entity("Berca_Backend.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Berca_Backend.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItem");
                });

            modelBuilder.Entity("Berca_Backend.Models.PushNotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ClickedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeliverySuccess")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("NotificationTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("PushSubscriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTemplateId");

                    b.HasIndex("PushSubscriptionId");

                    b.ToTable("PushNotificationLogs");
                });

            modelBuilder.Entity("Berca_Backend.Models.PushSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("P256dh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("Berca_Backend.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScheduleExpression")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Berca_Backend.Models.ReportExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ExecutedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ExecutedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ExecutionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("OutputPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutedByUserId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportExecutions");
                });

            modelBuilder.Entity("Berca_Backend.Models.ReportTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ReportTemplates");
                });

            modelBuilder.Entity("Berca_Backend.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<decimal>("ChangeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal?>("CreditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreditTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsCreditTransaction")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OriginalSaleId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ReceiptPrinted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReceiptPrintedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RedeemedPoints")
                        .HasColumnType("int");

                    b.Property<string>("RefundReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("CreditTransactionId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentMethod")
                        .HasDatabaseName("IX_Sales_PaymentMethod");

                    b.HasIndex("SaleDate")
                        .HasDatabaseName("IX_Sales_SaleDate");

                    b.HasIndex("SaleNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Sales_SaleNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Sales_Status");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Berca_Backend.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductBarcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pcs");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_SaleItems_ProductId");

                    b.HasIndex("SaleId")
                        .HasDatabaseName("IX_SaleItems_SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.SaleItemBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId")
                        .HasDatabaseName("IX_SaleItemBatches_BatchId");

                    b.HasIndex("BatchNumber")
                        .HasDatabaseName("IX_SaleItemBatches_BatchNumber");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_SaleItemBatches_CreatedAt");

                    b.HasIndex("SaleItemId")
                        .HasDatabaseName("IX_SaleItemBatches_SaleItemId");

                    b.HasIndex("SaleItemId", "BatchId")
                        .HasDatabaseName("IX_SaleItemBatches_SaleItem_Batch");

                    b.ToTable("SaleItemBatches");
                });

            modelBuilder.Entity("Berca_Backend.Models.StockMutation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MutationType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("StockAfter")
                        .HasColumnType("int");

                    b.Property<int>("StockBefore")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UserId");

                    b.ToTable("StockMutations");
                });

            modelBuilder.Entity("Berca_Backend.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .HasDatabaseName("IX_Suppliers_CompanyName");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreditLimit")
                        .HasDatabaseName("IX_Suppliers_CreditLimit");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Suppliers_Email");

                    b.HasIndex("PaymentTerms")
                        .HasDatabaseName("IX_Suppliers_PaymentTerms");

                    b.HasIndex("SupplierCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Suppliers_SupplierCode");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("BranchId", "IsActive")
                        .HasDatabaseName("IX_Suppliers_Branch_Status");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Berca_Backend.Models.TransferItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,4)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("TransferRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("TransferredQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_TransferItem_ProductId");

                    b.HasIndex("TransferRequestId")
                        .HasDatabaseName("IX_TransferItem_TransferRequestId");

                    b.HasIndex("TransferRequestId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("IX_TransferItem_TransferRequest_Product");

                    b.ToTable("TransferItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.TransferRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<int>("SourceBranchId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TargetBranchId")
                        .HasColumnType("int");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransferNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_TransferRequest_Priority");

                    b.HasIndex("RequestedAt")
                        .HasDatabaseName("IX_TransferRequest_RequestedAt");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("SourceBranchId")
                        .HasDatabaseName("IX_TransferRequest_SourceBranch");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TransferRequest_Status");

                    b.HasIndex("TargetBranchId")
                        .HasDatabaseName("IX_TransferRequest_TargetBranch");

                    b.HasIndex("TransferNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_TransferRequest_TransferNumber");

                    b.HasIndex("SourceBranchId", "Status")
                        .HasDatabaseName("IX_TransferRequest_SourceBranch_Status");

                    b.HasIndex("TargetBranchId", "Status")
                        .HasDatabaseName("IX_TransferRequest_TargetBranch_Status");

                    b.ToTable("TransferRequests");
                });

            modelBuilder.Entity("Berca_Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessibleBranchIds")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("CanAccessMultipleBranches")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("User");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_Users_BranchId");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.HasIndex("BranchId", "Role")
                        .HasDatabaseName("IX_Users_BranchId_Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Berca_Backend.Models.UserNotificationPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlertFrequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("ExpiryAlerts")
                        .HasColumnType("bit");

                    b.Property<bool>("FinancialAlerts")
                        .HasColumnType("bit");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("QuietHoursEnd")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("QuietHoursStart")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("StockAlerts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotificationPreferences");
                });

            modelBuilder.Entity("Berca_Backend.Models.UserNotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailLowStock")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailMonthlyReport")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailSystemUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppLowStock")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppSales")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppSystem")
                        .HasColumnType("bit");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("QuietHoursEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("QuietHoursStart")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserNotificationSettings");
                });

            modelBuilder.Entity("Berca_Backend.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Division")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Berca_Backend.Models.Branch", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "ParentBranch")
                        .WithMany("SubBranches")
                        .HasForeignKey("ParentBranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Berca_Backend.Models.Supplier", null)
                        .WithMany("Branches")
                        .HasForeignKey("SupplierId");

                    b.Navigation("ParentBranch");
                });

            modelBuilder.Entity("Berca_Backend.Models.BranchAccess", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.CalendarEvent", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.CalendarEventReminder", b =>
                {
                    b.HasOne("Berca_Backend.Models.CalendarEvent", "CalendarEvent")
                        .WithMany()
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CalendarEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.Facture", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.Supplier", "Supplier")
                        .WithMany("Factures")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ReceivedByUser");

                    b.Navigation("Supplier");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.FactureItem", b =>
                {
                    b.HasOne("Berca_Backend.Models.Facture", "Facture")
                        .WithMany("Items")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "VerifiedByUser")
                        .WithMany()
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Facture");

                    b.Navigation("Product");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.FacturePayment", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.User", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Facture", "Facture")
                        .WithMany("Payments")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Facture");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryMutation", b =>
                {
                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany("InventoryMutations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransfer", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.User", "CancelledByUser")
                        .WithMany()
                        .HasForeignKey("CancelledBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.Branch", "DestinationBranch")
                        .WithMany()
                        .HasForeignKey("DestinationBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "ReceivedByUser")
                        .WithMany()
                        .HasForeignKey("ReceivedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "ShippedByUser")
                        .WithMany()
                        .HasForeignKey("ShippedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Berca_Backend.Models.Branch", "SourceBranch")
                        .WithMany()
                        .HasForeignKey("SourceBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CancelledByUser");

                    b.Navigation("DestinationBranch");

                    b.Navigation("ReceivedByUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ShippedByUser");

                    b.Navigation("SourceBranch");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransferItem", b =>
                {
                    b.HasOne("Berca_Backend.Models.InventoryTransfer", "InventoryTransfer")
                        .WithMany("TransferItems")
                        .HasForeignKey("InventoryTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InventoryTransfer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransferStatusHistory", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.InventoryTransfer", "InventoryTransfer")
                        .WithMany()
                        .HasForeignKey("InventoryTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("InventoryTransfer");
                });

            modelBuilder.Entity("Berca_Backend.Models.MemberCreditTransaction", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Member", "Member")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Berca_Backend.Models.MemberPaymentReminder", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Member", "Member")
                        .WithMany("PaymentReminders")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Berca_Backend.Models.MemberPoint", b =>
                {
                    b.HasOne("Berca_Backend.Models.Member", "Member")
                        .WithMany("MemberPoints")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Member");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Berca_Backend.Models.Notification", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.NotificationSettings", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Berca_Backend.Models.NotificationSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.Product", b =>
                {
                    b.HasOne("Berca_Backend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Berca_Backend.Models.ProductBatch", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "DisposedByUser")
                        .WithMany()
                        .HasForeignKey("DisposedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany("ProductBatches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DisposedByUser");

                    b.Navigation("Product");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Berca_Backend.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Berca_Backend.Models.PushNotificationLog", b =>
                {
                    b.HasOne("Berca_Backend.Models.NotificationTemplate", "NotificationTemplate")
                        .WithMany()
                        .HasForeignKey("NotificationTemplateId");

                    b.HasOne("Berca_Backend.Models.PushSubscription", "PushSubscription")
                        .WithMany()
                        .HasForeignKey("PushSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationTemplate");

                    b.Navigation("PushSubscription");
                });

            modelBuilder.Entity("Berca_Backend.Models.PushSubscription", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.Report", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.ReportExecution", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "ExecutedByUser")
                        .WithMany()
                        .HasForeignKey("ExecutedByUserId");

                    b.HasOne("Berca_Backend.Models.Report", "Report")
                        .WithMany("ReportExecutions")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutedByUser");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Berca_Backend.Models.ReportTemplate", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.Sale", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.MemberCreditTransaction", "CreditTransaction")
                        .WithMany()
                        .HasForeignKey("CreditTransactionId");

                    b.HasOne("Berca_Backend.Models.Member", "Member")
                        .WithMany("Sales")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("CreditTransaction");

                    b.Navigation("Member");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.SaleItem", b =>
                {
                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Berca_Backend.Models.SaleItemBatch", b =>
                {
                    b.HasOne("Berca_Backend.Models.ProductBatch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.SaleItem", "SaleItem")
                        .WithMany()
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("Berca_Backend.Models.StockMutation", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");

                    b.Navigation("Sale");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.Supplier", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Berca_Backend.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Berca_Backend.Models.TransferItem", b =>
                {
                    b.HasOne("Berca_Backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.TransferRequest", "TransferRequest")
                        .WithMany("Items")
                        .HasForeignKey("TransferRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TransferRequest");
                });

            modelBuilder.Entity("Berca_Backend.Models.TransferRequest", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Berca_Backend.Models.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Branch", "SourceBranch")
                        .WithMany()
                        .HasForeignKey("SourceBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Berca_Backend.Models.Branch", "TargetBranch")
                        .WithMany()
                        .HasForeignKey("TargetBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("SourceBranch");

                    b.Navigation("TargetBranch");
                });

            modelBuilder.Entity("Berca_Backend.Models.User", b =>
                {
                    b.HasOne("Berca_Backend.Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Berca_Backend.Models.UserNotificationPreferences", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.UserNotificationSettings", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithOne("UserNotificationSettings")
                        .HasForeignKey("Berca_Backend.Models.UserNotificationSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.UserProfile", b =>
                {
                    b.HasOne("Berca_Backend.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Berca_Backend.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Berca_Backend.Models.Branch", b =>
                {
                    b.Navigation("SubBranches");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Berca_Backend.Models.Facture", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Berca_Backend.Models.InventoryTransfer", b =>
                {
                    b.Navigation("TransferItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.Member", b =>
                {
                    b.Navigation("CreditTransactions");

                    b.Navigation("MemberPoints");

                    b.Navigation("PaymentReminders");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Berca_Backend.Models.Product", b =>
                {
                    b.Navigation("InventoryMutations");

                    b.Navigation("ProductBatches");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Berca_Backend.Models.Report", b =>
                {
                    b.Navigation("ReportExecutions");
                });

            modelBuilder.Entity("Berca_Backend.Models.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Berca_Backend.Models.Supplier", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Factures");
                });

            modelBuilder.Entity("Berca_Backend.Models.TransferRequest", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Berca_Backend.Models.User", b =>
                {
                    b.Navigation("UserNotificationSettings");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
