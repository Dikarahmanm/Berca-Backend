using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Berca_Backend.Models
{
    /// <summary>
    /// Calendar event model for scheduling and tracking business events
    /// Integrates with existing business data (product expiry, facture due dates)
    /// Indonesian business context with proper timezone handling
    /// </summary>
    public class CalendarEvent
    {
        [Key]
        public int Id { get; set; }

        /// <summary>
        /// Event title in Indonesian
        /// </summary>
        [Required]
        [MaxLength(200)]
        public required string Title { get; set; }

        /// <summary>
        /// Optional event description
        /// </summary>
        [MaxLength(1000)]
        public string? Description { get; set; }

        /// <summary>
        /// Event start date and time (Jakarta timezone)
        /// </summary>
        [Required]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Optional event end date and time (Jakarta timezone)
        /// For all-day events, this can be null
        /// </summary>
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Whether this is an all-day event
        /// </summary>
        public bool IsAllDay { get; set; } = false;

        /// <summary>
        /// Type of calendar event for categorization
        /// </summary>
        [Required]
        public CalendarEventType EventType { get; set; }

        /// <summary>
        /// Event priority level for display and notification purposes
        /// </summary>
        public EventPriority Priority { get; set; } = EventPriority.Normal;

        /// <summary>
        /// Optional action URL for clickable events
        /// </summary>
        [MaxLength(500)]
        public string? ActionUrl { get; set; }

        /// <summary>
        /// Related entity ID for business context tracking
        /// Can reference Product, Facture, Member, etc.
        /// </summary>
        public int? RelatedEntityId { get; set; }

        /// <summary>
        /// Type of related entity for polymorphic relationships
        /// Examples: "Product", "Facture", "Member", "Sale"
        /// </summary>
        [MaxLength(50)]
        public string? RelatedEntityType { get; set; }

        /// <summary>
        /// Branch ID for multi-branch support
        /// Null means all branches can see this event
        /// </summary>
        public int? BranchId { get; set; }

        /// <summary>
        /// Whether this event has reminder notifications enabled
        /// </summary>
        public bool HasReminder { get; set; } = false;

        /// <summary>
        /// Minutes before event to send reminder
        /// Common values: 15, 30, 60, 120, 1440 (1 day)
        /// </summary>
        public int? ReminderMinutes { get; set; }

        /// <summary>
        /// Whether reminder notification has been sent
        /// </summary>
        public bool ReminderSent { get; set; } = false;

        /// <summary>
        /// Event color for calendar display (hex color)
        /// </summary>
        [MaxLength(7)]
        public string? Color { get; set; }

        /// <summary>
        /// Whether this event is currently active/visible
        /// </summary>
        public bool IsActive { get; set; } = true;

        /// <summary>
        /// Whether this event was auto-generated from business data
        /// </summary>
        public bool IsAutoGenerated { get; set; } = false;

        /// <summary>
        /// Recurrence pattern for recurring events (JSON format)
        /// </summary>
        [MaxLength(500)]
        public string? RecurrencePattern { get; set; }

        /// <summary>
        /// Optional notes or additional information
        /// </summary>
        [MaxLength(2000)]
        public string? Notes { get; set; }

        // ==================== AUDIT FIELDS ==================== //

        /// <summary>
        /// User who created this event
        /// </summary>
        [Required]
        public int CreatedBy { get; set; }

        /// <summary>
        /// When this event was created
        /// </summary>
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// When this event was last updated
        /// </summary>
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        // ==================== NAVIGATION PROPERTIES ==================== //

        /// <summary>
        /// User who created this event
        /// </summary>
        public virtual User CreatedByUser { get; set; } = null!;

        /// <summary>
        /// Branch this event belongs to (optional)
        /// </summary>
        public virtual Branch? Branch { get; set; }
    }

    /// <summary>
    /// Calendar event types for business categorization
    /// </summary>
    public enum CalendarEventType
    {
        /// <summary>
        /// Product batch expiry alerts
        /// </summary>
        ProductExpiry = 0,

        /// <summary>
        /// Supplier facture due date reminders
        /// </summary>
        FactureDue = 1,

        /// <summary>
        /// Member payment reminders
        /// </summary>
        MemberPayment = 2,

        /// <summary>
        /// Inventory management tasks
        /// </summary>
        Inventory = 3,

        /// <summary>
        /// Store maintenance activities
        /// </summary>
        Maintenance = 4,

        /// <summary>
        /// Staff meetings and training
        /// </summary>
        Meeting = 5,

        /// <summary>
        /// Sales promotions and campaigns
        /// </summary>
        Promotion = 6,

        /// <summary>
        /// System maintenance and updates
        /// </summary>
        SystemMaintenance = 7,

        /// <summary>
        /// Supplier deliveries and appointments
        /// </summary>
        SupplierAppointment = 8,

        /// <summary>
        /// General business reminders
        /// </summary>
        Reminder = 9,

        /// <summary>
        /// Custom user-defined events
        /// </summary>
        Custom = 10
    }

    /// <summary>
    /// Event priority levels for display and notification purposes
    /// </summary>
    public enum EventPriority
    {
        /// <summary>
        /// Low priority events (informational)
        /// </summary>
        Low = 0,

        /// <summary>
        /// Normal priority events (default)
        /// </summary>
        Normal = 1,

        /// <summary>
        /// High priority events (important)
        /// </summary>
        High = 2,

        /// <summary>
        /// Critical priority events (urgent action required)
        /// </summary>
        Critical = 3
    }

    /// <summary>
    /// Calendar event reminder log for tracking sent reminders
    /// </summary>
    public class CalendarEventReminder
    {
        [Key]
        public int Id { get; set; }

        /// <summary>
        /// Calendar event this reminder belongs to
        /// </summary>
        [Required]
        public int CalendarEventId { get; set; }

        /// <summary>
        /// When the reminder was scheduled to be sent
        /// </summary>
        [Required]
        public DateTime ScheduledTime { get; set; }

        /// <summary>
        /// When the reminder was actually sent
        /// </summary>
        public DateTime? SentTime { get; set; }

        /// <summary>
        /// Whether the reminder was sent successfully
        /// </summary>
        public bool IsSent { get; set; } = false;

        /// <summary>
        /// Number of delivery attempts
        /// </summary>
        public int AttemptCount { get; set; } = 0;

        /// <summary>
        /// Error message if delivery failed
        /// </summary>
        [MaxLength(500)]
        public string? ErrorMessage { get; set; }

        /// <summary>
        /// Reminder delivery method used
        /// </summary>
        [MaxLength(50)]
        public string? DeliveryMethod { get; set; } // "Push", "Email", "SMS"

        /// <summary>
        /// User who should receive this reminder
        /// </summary>
        public int? UserId { get; set; }

        /// <summary>
        /// Role-based reminder (if not user-specific)
        /// </summary>
        [MaxLength(50)]
        public string? TargetRole { get; set; }

        // ==================== NAVIGATION PROPERTIES ==================== //

        public virtual CalendarEvent CalendarEvent { get; set; } = null!;
        public virtual User? User { get; set; }
    }
}